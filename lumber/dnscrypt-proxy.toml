listen_addresses = ['127.0.0.1:53']

max_clients = 250

ipv4_servers = true
ipv6_servers = false
dnscrypt_servers = true
doh_servers = false
odoh_servers = false

require_dnssec = true
require_nolog = true
require_nofilter = true
disabled_server_names = []

force_tcp = false
http3 = true
timeout = 5000
keepalive = 30

## Delay, in minutes, after which certificates are reloaded
cert_refresh_delay = 240

## Bootstrap resolvers
##
## These are normal, non-encrypted DNS resolvers, that will be only used
## for one-shot queries when retrieving the initial resolvers list and if
## the system DNS configuration doesn't work.
##
## No user queries will ever be leaked through these resolvers.
## Resolvers supporting DNSSEC are recommended.
bootstrap_resolvers = ['9.9.9.11:53', '8.8.8.8:53']
ignore_system_dns = true
netprobe_timeout = 60

## Address and port to try initializing a connection to, just to check
## if the network is up.
netprobe_address = '9.9.9.9:53'

# Maximum log files size in MB - Set to 0 for unlimited.
log_files_max_size = 10
# How long to keep backup files, in days
log_files_max_age = 7
# Maximum log files backups to keep (or 0 to keep all backups)
log_files_max_backups = 1

block_ipv6 = false
block_unqualified = true
block_undelegated = true
reject_ttl = 10

## Enable a DNS cache to reduce latency and outgoing traffic
cache = true
## Cache size
cache_size = 4096
## Minimum TTL for cached entries
cache_min_ttl = 2400
## Maximum TTL for cached entries
cache_max_ttl = 86400
## Minimum TTL for negatively cached entries
cache_neg_min_ttl = 60
## Maximum TTL for negatively cached entries
cache_neg_max_ttl = 600

## Log client queries to a file
[query_log]
## Path to the query log file (absolute, or relative to the same directory as the config file)
file = '/dev/stdout'
## Query log format (currently supported: tsv and ltsv)
format = 'tsv'

############################################
#        Suspicious queries logging        #
############################################

## Log queries for nonexistent zones
## These queries can reveal the presence of malware, broken/obsolete applications,
## and devices signaling their presence to 3rd parties.

[nx_log]
## Path to the query log file (absolute, or relative to the same directory as the config file)
file = '/dev/stderr'
## Query log format (currently supported: tsv and ltsv)
format = 'tsv'

[sources]
  ### An example of a remote source from https://github.com/DNSCrypt/dnscrypt-resolvers
  [sources.public-resolvers]
    urls = ['https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v3/public-resolvers.md',
            'https://download.dnscrypt.info/resolvers-list/v3/public-resolvers.md']
    cache_file = 'public-resolvers.md'
    minisign_key = 'RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3'
    refresh_delay = 72
    prefix = ''

  ### Anonymized DNS relays
  [sources.relays]
    urls = ['https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v3/relays.md',
            'https://download.dnscrypt.info/resolvers-list/v3/relays.md']
    cache_file = 'relays.md'
    minisign_key = 'RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3'
    refresh_delay = 72
    prefix = ''

#########################################
#        Servers with known bugs        #
#########################################
[broken_implementations]

## Cisco servers currently cannot handle queries larger than 1472 bytes, and don't
## truncate responses larger than questions as expected by the DNSCrypt protocol.
fragments_blocked = [
  'cisco', 'cisco-ipv6', 'cisco-familyshield', 'cisco-familyshield-ipv6',
  'cleanbrowsing-adult', 'cleanbrowsing-adult-ipv6', 'cleanbrowsing-family',
  'cleanbrowsing-family-ipv6', 'cleanbrowsing-security', 'cleanbrowsing-security-ipv6'
]

[anonymized_dns]
## Routes are indirect ways to reach DNSCrypt servers.
## "server_name" can also be set to "*" to define a default route, for all servers:
## { server_name='*', via=['anon-example-1', 'anon-example-2'] }
##
## If a route is ["*"], the proxy automatically picks a relay on a distinct network.
## { server_name='*', via=['*'] } is also an option, but is likely to be suboptimal.
##
## Manual selection is always recommended over automatic selection, so that you can
## select (relay,server) pairs that work well and fit your own criteria (close by or
## in different countries, operated by different entities, on distinct ISPs...)

routes = [
   { server_name='*', via=['*'] },
]

## Skip resolvers incompatible with anonymization instead of using them directly
skip_incompatible = true
